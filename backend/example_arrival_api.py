#!/usr/bin/env python3
"""
Exemple d'utilisation de l'API pour tester la fonctionnalit√© d'itin√©raire avec horaire d'arriv√©e
"""

import requests
import json
from datetime import datetime

def test_arrival_api():
    """Test de l'API d'itin√©raire avec horaire d'arriv√©e"""
    
    # URL de l'API (ajuster selon votre configuration)
    base_url = "http://localhost:5000"
    
    # Test 1: Itin√©raire avec horaire d'arriv√©e
    print("=== Test 1: Itin√©raire avec horaire d'arriv√©e ===")
    
    arrival_data = {
        "start_station": "Ch√¢telet",
        "end_station": "Bastille",
        "arrival_time": "09:00",
        "date": datetime.now().strftime("%Y-%m-%d"),
        "max_wait_time": 1800
    }
    
    try:
        response = requests.post(
            f"{base_url}/temporal/path-arrival",
            json=arrival_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Itin√©raire trouv√©!")
            print(f"   D√©part: {result.get('departure_time', 'N/A')}")
            print(f"   Arriv√©e: {result.get('arrival_time', 'N/A')}")
            print(f"   Dur√©e totale: {result.get('total_duration', 0) // 60} minutes")
            print(f"   Temps d'attente: {result.get('total_wait_time', 0) // 60} minutes")
            
            # Informations sp√©cifiques √† l'arriv√©e
            arrival_info = result.get('arrival_info', {})
            if arrival_info:
                print(f"   Heure d'arriv√©e demand√©e: {arrival_info.get('requested_arrival_time')}")
                print(f"   Heure d'arriv√©e r√©elle: {arrival_info.get('actual_arrival_time')}")
                print(f"   √âcart: {arrival_info.get('arrival_difference_minutes')} minutes")
            
            # D√©tails des segments
            segments = result.get('segments', [])
            print(f"\n   Segments ({len(segments)}):")
            for i, segment in enumerate(segments, 1):
                print(f"   {i}. {segment['from_station']} ‚Üí {segment['to_station']} (Ligne {segment['line']})")
                print(f"      D√©part: {segment['departure_time']}, Arriv√©e: {segment['arrival_time']}")
                if segment.get('wait_time', 0) > 0:
                    print(f"      Attente: {segment['wait_time'] // 60} minutes")
                if segment.get('transfer_time', 0) > 0:
                    print(f"      Correspondance: {segment['transfer_time'] // 60} minutes")
        
        else:
            print(f"‚ùå Erreur {response.status_code}: {response.text}")
    
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que le serveur backend est d√©marr√©.")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def test_comparison_api():
    """Compare l'API normale vs l'API avec horaire d'arriv√©e"""
    
    print("\n=== Test 2: Comparaison API normale vs arriv√©e ===")
    
    base_url = "http://localhost:5000"
    target_time = "09:00"
    
    # Test avec l'API normale (d√©part)
    normal_data = {
        "start_station": "Ch√¢telet",
        "end_station": "Bastille",
        "departure_time": target_time,
        "date": datetime.now().strftime("%Y-%m-%d"),
        "max_wait_time": 1800
    }
    
    # Test avec l'API arriv√©e
    arrival_data = {
        "start_station": "Ch√¢telet",
        "end_station": "Bastille",
        "arrival_time": target_time,
        "date": datetime.now().strftime("%Y-%m-%d"),
        "max_wait_time": 1800
    }
    
    try:
        # Appel API normale
        normal_response = requests.post(
            f"{base_url}/temporal/path",
            json=normal_data,
            headers={"Content-Type": "application/json"}
        )
        
        # Appel API arriv√©e
        arrival_response = requests.post(
            f"{base_url}/temporal/path-arrival",
            json=arrival_data,
            headers={"Content-Type": "application/json"}
        )
        
        if normal_response.status_code == 200 and arrival_response.status_code == 200:
            normal_result = normal_response.json()
            arrival_result = arrival_response.json()
            
            print("‚úÖ Comparaison r√©ussie!")
            print(f"   Normal - D√©part: {normal_result.get('departure_time')}, Arriv√©e: {normal_result.get('arrival_time')}")
            print(f"   Arriv√©e - D√©part: {arrival_result.get('departure_time')}, Arriv√©e: {arrival_result.get('arrival_time')}")
            
            # Calculer les √©carts
            arrival_info = arrival_result.get('arrival_info', {})
            if arrival_info:
                arrival_diff = arrival_info.get('arrival_difference_minutes', 0)
                print(f"   √âcart avec l'heure d'arriv√©e souhait√©e: {arrival_diff} minutes")
                
                if arrival_diff <= 5:
                    print("   ‚úÖ Excellent! L'itin√©raire arrive tr√®s proche de l'heure souhait√©e")
                elif arrival_diff <= 15:
                    print("   ‚úÖ Bon! L'itin√©raire arrive proche de l'heure souhait√©e")
                else:
                    print("   ‚ö†Ô∏è L'itin√©raire arrive avec un √©cart important")
        
        else:
            print(f"‚ùå Erreur dans les appels API")
            if normal_response.status_code != 200:
                print(f"   API normale: {normal_response.status_code} - {normal_response.text}")
            if arrival_response.status_code != 200:
                print(f"   API arriv√©e: {arrival_response.status_code} - {arrival_response.text}")
    
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur. Assurez-vous que le serveur backend est d√©marr√©.")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def test_different_stations():
    """Test avec diff√©rentes paires de stations"""
    
    print("\n=== Test 3: Diff√©rentes paires de stations ===")
    
    base_url = "http://localhost:5000"
    test_cases = [
        ("Ch√¢telet", "Bastille"),
        ("Gare du Nord", "Gare de Lyon"),
        ("Montparnasse", "Saint-Lazare"),
    ]
    
    for start_station, end_station in test_cases:
        print(f"\nTest: {start_station} ‚Üí {end_station}")
        
        arrival_data = {
            "start_station": start_station,
            "end_station": end_station,
            "arrival_time": "10:00",
            "date": datetime.now().strftime("%Y-%m-%d"),
            "max_wait_time": 1800
        }
        
        try:
            response = requests.post(
                f"{base_url}/temporal/path-arrival",
                json=arrival_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                arrival_info = result.get('arrival_info', {})
                arrival_diff = arrival_info.get('arrival_difference_minutes', 0)
                print(f"   ‚úÖ √âcart: {arrival_diff} minutes")
            else:
                print(f"   ‚ùå Erreur {response.status_code}")
        
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")

if __name__ == "__main__":
    print("üöá Test de l'API d'itin√©raire avec horaire d'arriv√©e")
    print("=" * 50)
    
    test_arrival_api()
    test_comparison_api()
    test_different_stations()
    
    print("\n" + "=" * 50)
    print("‚úÖ Tests termin√©s!") 