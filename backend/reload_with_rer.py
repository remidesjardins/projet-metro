#!/usr/bin/env python3
"""
Script pour effacer le cache et recharger les donn√©es avec les RER.
"""

import os
import shutil
import sys
from pathlib import Path

def clear_cache():
    """Efface tous les fichiers de cache."""
    print("üßπ Effacement du cache...")
    
    # Chemin vers le dossier cache
    cache_dir = Path(__file__).parent / 'data' / 'cache'
    
    if cache_dir.exists():
        try:
            shutil.rmtree(cache_dir)
            print(f"‚úÖ Cache effac√©: {cache_dir}")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'effacement du cache: {e}")
            return False
    else:
        print(f"‚ÑπÔ∏è  Dossier cache non trouv√©: {cache_dir}")
    
    # Cr√©er le dossier cache vide
    cache_dir.mkdir(parents=True, exist_ok=True)
    print(f"‚úÖ Dossier cache recr√©√©: {cache_dir}")
    
    return True

def reload_data():
    """Recharge les donn√©es avec les RER."""
    print("\nüîÑ Rechargement des donn√©es avec les RER...")
    
    try:
        # Importer apr√®s avoir effac√© le cache
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from utils.data_manager import DataManager
        
        # Forcer le rechargement
        DataManager.clear_cache()
        
        # Charger les donn√©es (cela va recr√©er le cache avec les RER)
        print("üìä Chargement des donn√©es GTFS...")
        graph, positions, stations = DataManager.get_data()
        
        print(f"‚úÖ Donn√©es recharg√©es avec succ√®s!")
        print(f"   - Stations: {len(stations)}")
        print(f"   - Connexions: {sum(len(neighbors) for neighbors in graph.values()) // 2}")
        
        # Compter les lignes
        line_counts = {}
        for station_id, station_data in stations.items():
            lines = station_data['line'] if isinstance(station_data['line'], list) else [station_data['line']]
            for line in lines:
                line_counts[line] = line_counts.get(line, 0) + 1
        
        print(f"   - Lignes disponibles: {sorted(line_counts.keys())}")
        
        # V√©rifier les RER
        rer_lines = ['A', 'B', 'C', 'D', 'E']
        found_rer = [line for line in rer_lines if line in line_counts]
        
        if found_rer:
            print(f"   üöÜ RER int√©gr√©s: {found_rer}")
            for line in found_rer:
                print(f"     * RER {line}: {line_counts[line]} stations")
        else:
            print(f"   ‚ö†Ô∏è  Aucun RER trouv√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du rechargement: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale."""
    print("üöÜ Int√©gration des RER dans le syst√®me")
    print("=" * 50)
    
    # 1. Effacer le cache
    if not clear_cache():
        print("‚ùå Impossible d'effacer le cache")
        return False
    
    # 2. Recharger les donn√©es
    if not reload_data():
        print("‚ùå Impossible de recharger les donn√©es")
        return False
    
    print("\nüéâ Int√©gration des RER termin√©e avec succ√®s!")
    print("\nProchaines √©tapes:")
    print("1. Red√©marrer le serveur backend: python app.py")
    print("2. Tester l'int√©gration: python test_rer_integration.py")
    print("3. V√©rifier l'affichage dans le frontend")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 