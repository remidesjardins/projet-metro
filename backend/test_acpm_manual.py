#!/usr/bin/env python3
"""
Script de test manuel pour v√©rifier l'ACPM (Arbre Couvrant de Poids Minimum).
Ce script teste la fonctionnalit√© ACPM et affiche les r√©sultats d√©taill√©s.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.kruskal import kruskal_mst
from utils.parser import load_data
import time

def test_acpm_manual():
    """Test manuel de l'ACPM avec affichage d√©taill√©."""
    print("üå≥ Test de l'ACPM (Arbre Couvrant de Poids Minimum)")
    print("=" * 60)
    
    # Charger les donn√©es
    print("üìä Chargement des donn√©es...")
    graph, positions, stations = load_data()
    print(f"   ‚úÖ {len(graph)} stations charg√©es")
    print(f"   ‚úÖ {len(positions)} positions disponibles")
    print(f"   ‚úÖ {len(stations)} donn√©es de stations disponibles")
    
    # Extraire les ar√™tes du graphe
    print("\nüîó Extraction des ar√™tes du graphe...")
    edges = []
    seen = set()
    
    for s1 in graph:
        for s2, weight_data in graph[s1].items():
            if (s2, s1) not in seen:
                # Extraire le poids selon le nouveau format
                if isinstance(weight_data, list) and len(weight_data) > 0:
                    weight = weight_data[0]['time'] if isinstance(weight_data[0], dict) else weight_data[0]
                elif isinstance(weight_data, dict):
                    weight = weight_data.get('time', weight_data)
                else:
                    weight = weight_data
                
                edges.append((weight, s1, s2))
                seen.add((s1, s2))
    
    print(f"   ‚úÖ {len(edges)} ar√™tes extraites")
    
    # V√©rifier les ar√™tes
    print("\nüîç V√©rification des ar√™tes...")
    valid_edges = 0
    total_weight = 0
    min_weight = float('inf')
    max_weight = 0
    
    for weight, s1, s2 in edges:
        if isinstance(weight, (int, float)) and weight >= 0:
            valid_edges += 1
            total_weight += weight
            min_weight = min(min_weight, weight)
            max_weight = max(max_weight, weight)
    
    print(f"   ‚úÖ {valid_edges}/{len(edges)} ar√™tes valides")
    print(f"   üìä Poids total des ar√™tes: {total_weight}")
    print(f"   üìä Poids minimum: {min_weight}")
    print(f"   üìä Poids maximum: {max_weight}")
    
    # Trier les ar√™tes par poids
    print("\nüìà Tri des ar√™tes par poids...")
    edges.sort()
    print(f"   ‚úÖ Ar√™tes tri√©es par poids croissant")
    
    # Calculer l'ACPM
    print("\nüå≥ Calcul de l'ACPM avec l'algorithme de Kruskal...")
    start_time = time.time()
    mst, acpm_total_weight = kruskal_mst(edges, len(graph))
    end_time = time.time()
    
    execution_time = end_time - start_time
    print(f"   ‚úÖ ACPM calcul√© en {execution_time:.4f} secondes")
    
    # Analyser l'ACPM
    print(f"\nüìä Analyse de l'ACPM:")
    print(f"   - Nombre de stations: {len(graph)}")
    print(f"   - Nombre d'ar√™tes dans l'ACPM: {len(mst)}")
    print(f"   - Poids total de l'ACPM: {acpm_total_weight}")
    print(f"   - Poids moyen par ar√™te: {acpm_total_weight / len(mst) if len(mst) > 0 else 0:.2f}")
    
    # V√©rifier la propri√©t√© d'arbre couvrant
    expected_edges = len(graph) - 1
    print(f"\nüîç V√©rification de la propri√©t√© d'arbre couvrant:")
    print(f"   - Ar√™tes attendues: {expected_edges}")
    print(f"   - Ar√™tes obtenues: {len(mst)}")
    print(f"   - ‚úÖ {'CORRECT' if len(mst) == expected_edges else 'INCORRECT'}")
    
    # V√©rifier la connexit√© de l'ACPM
    print(f"\nüîó V√©rification de la connexit√© de l'ACPM...")
    acpm_graph = {}
    for s1, s2 in mst:
        if s1 not in acpm_graph:
            acpm_graph[s1] = set()
        if s2 not in acpm_graph:
            acpm_graph[s2] = set()
        acpm_graph[s1].add(s2)
        acpm_graph[s2].add(s1)
    
    # DFS pour v√©rifier la connexit√©
    visited = set()
    if acpm_graph:
        start_station = next(iter(acpm_graph))
        
        def dfs(node):
            visited.add(node)
            for neighbor in acpm_graph.get(node, set()):
                if neighbor not in visited:
                    dfs(neighbor)
        
        dfs(start_station)
        
        print(f"   - Stations accessibles: {len(visited)}")
        print(f"   - Stations totales: {len(graph)}")
        print(f"   - ‚úÖ {'CONNEXE' if len(visited) == len(graph) else 'NON CONNEXE'}")
        
        if len(visited) != len(graph):
            unreachable = set(graph.keys()) - visited
            print(f"   - ‚ö†Ô∏è  Stations inaccessibles: {len(unreachable)}")
            for station_id in list(unreachable)[:5]:  # Afficher les 5 premi√®res
                station_name = stations[station_id]['name']
                print(f"     * {station_name} (ID: {station_id})")
            if len(unreachable) > 5:
                print(f"     ... et {len(unreachable) - 5} autres stations")
    
    # V√©rifier la minimalit√© (pas de cycles)
    print(f"\nüîÑ V√©rification de la minimalit√© (pas de cycles)...")
    edge_set = set()
    has_duplicates = False
    
    for s1, s2 in mst:
        edge_tuple = tuple(sorted([s1, s2]))
        if edge_tuple in edge_set:
            has_duplicates = True
            break
        edge_set.add(edge_tuple)
    
    print(f"   - Ar√™tes uniques: {len(edge_set)}")
    print(f"   - ‚úÖ {'PAS DE CYCLES' if not has_duplicates else 'CYCLES D√âTECT√âS'}")
    
    # Analyser les ar√™tes de l'ACPM
    print(f"\nüìã Analyse d√©taill√©e des ar√™tes de l'ACPM:")
    acpm_weights = []
    for s1, s2 in mst:
        # Trouver le poids de cette ar√™te
        weight_data = graph[s1].get(s2) or graph[s2].get(s1)
        if isinstance(weight_data, list) and len(weight_data) > 0:
            weight = weight_data[0]['time'] if isinstance(weight_data[0], dict) else weight_data[0]
        elif isinstance(weight_data, dict):
            weight = weight_data.get('time', weight_data)
        else:
            weight = weight_data
        
        acpm_weights.append(weight)
        
        station1_name = stations[s1]['name']
        station2_name = stations[s2]['name']
        print(f"   - {station1_name} ‚Üî {station2_name} (poids: {weight})")
    
    # Statistiques des poids
    if acpm_weights:
        print(f"\nüìä Statistiques des poids de l'ACPM:")
        print(f"   - Poids minimum: {min(acpm_weights)}")
        print(f"   - Poids maximum: {max(acpm_weights)}")
        print(f"   - Poids moyen: {sum(acpm_weights) / len(acpm_weights):.2f}")
        print(f"   - Poids m√©dian: {sorted(acpm_weights)[len(acpm_weights)//2]}")
    
    # V√©rifier la coh√©rence du poids total
    calculated_total = sum(acpm_weights)
    print(f"\nüîç V√©rification de la coh√©rence:")
    print(f"   - Poids total calcul√©: {calculated_total}")
    print(f"   - Poids total retourn√©: {acpm_total_weight}")
    print(f"   - ‚úÖ {'COH√âRENT' if abs(calculated_total - acpm_total_weight) < 0.01 else 'INCOH√âRENT'}")
    
    # Test de performance
    print(f"\n‚ö° Test de performance:")
    print(f"   - Temps de calcul: {execution_time:.4f}s")
    print(f"   - ‚úÖ {'RAPIDE' if execution_time < 1.0 else 'LENT'}")
    
    # R√©sum√© final
    print(f"\nüìã R√©sum√© final:")
    print(f"   {'‚úÖ' if len(mst) == expected_edges else '‚ùå'} Propri√©t√© d'arbre couvrant")
    print(f"   {'‚úÖ' if len(visited) == len(graph) else '‚ùå'} Connexit√©")
    print(f"   {'‚úÖ' if not has_duplicates else '‚ùå'} Minimalit√© (pas de cycles)")
    print(f"   {'‚úÖ' if abs(calculated_total - acpm_total_weight) < 0.01 else '‚ùå'} Coh√©rence des poids")
    print(f"   {'‚úÖ' if execution_time < 1.0 else '‚ùå'} Performance")
    
    print(f"\nüå≥ L'ACPM du m√©tro de Paris:")
    print(f"   - {len(mst)} ar√™tes pour connecter {len(graph)} stations")
    print(f"   - Poids total: {acpm_total_weight} (temps total minimal)")
    print(f"   - Performance: excellent ({execution_time:.4f}s)")
    
    return len(mst) == expected_edges and len(visited) == len(graph) and not has_duplicates

if __name__ == "__main__":
    try:
        success = test_acpm_manual()
        print(f"\nüéâ Test termin√© avec {'succ√®s' if success else '√©chec'}!")
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        sys.exit(1) 